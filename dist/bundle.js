"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[296],{735:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]);const s=a},756:(n,e,t)=>{t.d(e,{Z:()=>E});var o=t(537),i=t.n(o),r=t(645),a=t.n(r),s=t(667),A=t.n(s),d=new URL(t(119),t.b),c=new URL(t(217),t.b),l=new URL(t(859),t.b),u=a()(i()),m=A()(d),h=A()(c),p=A()(l);u.push([n.id,'*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    /* border: 1px solid red; */\n}\n\n:root { \n  font-size: 100%;\n  font-family: sans-serif;\n  --main-bg-clr: #FBFCD4;\n  --white: #fff;\n  --hover-gold: #FBC403;\n  --black-clr: #0A0A0A;\n  --transparent-black: rgba(0,0,0,0.9);\n  --medium-black: #292826;\n  --light-black: #151515;\n  --title-gold: #FBC403;\n  --light-green: #DAFFD5;\n  --light-red: #FA6B84;\n}\n\nbody {\n  background-color: #ececec;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n  grid-template-areas: "header header"\n                       "sidebar main";\n}\n\n@media only screen and (max-width: 600px) {\n  body {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n/* -------------- UTILS / Commons -------------- */\n\n.btn {\n  padding: 0.5em 1em;\n  border: none;\n  outline: 1px solid rgba(0,0,0,0.2);\n  border-radius: 50%;\n  transition: all ease-in-out 200ms;\n}\n\n.btn:hover {\n  box-shadow: 0 4px 2px #888888;\n  transform: translateY(-2px);\n}\n\n.btn:active {\n  transform: translateY(3px);\n  box-shadow: none;\n}\n\n.svg-button {\n  \n  width: 2rem;\n  height: 2rem;\n  background-repeat: no-repeat;\n  background-color: var(--white);\n  background-position: center;\n  background-size: 75%;\n  \n}\n\n\n.controller-title {\n  text-align: center;\n  padding: 0.5em 1em;\n  background-color: var(--transparent-black);\n  letter-spacing: 0.08em;\n  color: var(--white);\n}\n\ninput {\n  padding: 0.5em;\n  font-size: 1rem;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  background-color: #ececec;\n}\n\ninput:focus {\n  outline: 3px solid black;\n}\n\n\n\n/* -------------- HEADER -------------- */\nheader {\n  background-color: var(--white);\n  grid-area: header;\n  text-align: center;\n  padding: 1em;\n}\n\n/* -------------- SIDEBAR -------------- */\n.project-sidebar {\n  background-color: var(--white);\n  grid-area: sidebar;\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  padding: 1em 1em;\n  margin: 1rem;\n  border-radius: 8px;\n}\n\n.project-input-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 1rem;\n}\n\n.project-input {\n  padding: 0.5em;\n  font-size: 1.1rem;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  background-color: #ececec;\n}\n\n.btn.add-project-btn {\n  padding: 0.2em 0.5em;\n  font-size: 1.6rem;\n  font-weight: bold;\n}\n\n.project-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  margin-top: 3rem;\n}\n\n.project {\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n  padding: 1.2em 1em;\n  outline: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.project:hover {  \n  background: rgba(0, 0, 0, 0.2);\n  outline: 2px solid black;\n  cursor: pointer;\n}\n\n.project:hover::before{\n  content: "☛ ";\n  color: #0A0A0A;\n}\n\n.project__edit {\n  margin-left: auto;\n  background-image: url('+m+");\n}\n\n.project__delete{\n  background-image: url("+h+');\n}\n\n.project.selected {\n  transform: scale(1.05);\n  background-color: var(--black-clr);\n  color: var(--title-gold);\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 8px 15px;\n\n}\n\n.project.selected::before {\n  font-size: 1.2rem;\n  content: "☛ ";\n  color: var(--title-gold);\n}\n\n/* -------------- MAIN -------------- */\nmain {\n  background-color: var(--white);\n  grid-area: main;\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  padding: 1em 1em;\n  margin: 1rem;\n  border-radius: 8px;\n\n}\n\n.todo-input-container {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n}\n\n\n\n.btn.add-todo-btn {\n  padding: 0.2em 0.5em;\n  font-size: 1.6rem;\n  font-weight: bold;\n}\n\n@media only screen and (max-width: 1025px) {\n  .todo-input-container {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .btn.add-todo-btn {\n    align-self: center;\n  }\n}\n\n\n.selected-project-title {\n  width: fit-content;\n  align-self: center;\n  padding-bottom: 0.5em;\n  border-bottom: 2px solid var(--black-clr);\n}\n\n.todo-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1.5rem;\n}\n\n\n.todo {\n  background-color: #ececec;\n  border-radius: 5px;\n  box-shadow: 3px 3px 5px #888888;\n  display: flex;\n  flex-direction: row;\n  gap: 0.8rem;\n  padding: 1.2em 1em;\n  align-items: center;\n}\n\n.todo__details {\n  margin-left: auto;\n  background-image: url('+p+");\n}\n\n.todo__edit {\n  background-image: url("+m+");\n}\n\n.todo__delete {\n  background-image: url("+h+");\n}\n\n.todo.priority-medium {\n  background-color: var(--light-green);\n}\n\n.todo.priority-high {\n  background-color: var(--light-red);\n}\n\n\n\n/* -------------- MODAL -------------- */\n\n.modal {\n  padding: 1rem 2rem;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  transition: 200ms ease-in-out;\n  border: 1px solid black;\n  border-radius: 10px;\n  z-index: 10;\n  background-color: white;\n  width: max-content;\n  max-width: 80%;\n}\n\n.modal.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n/* --- OVERLAY --- */\n#overlay {\n  position: fixed;\n  opacity: 0;\n  transition: 200ms ease-in-out;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, .5);\n  pointer-events: none;\n}\n\n#overlay.active {\n  opacity: 1;\n  pointer-events: all;\n}\n\n.modal button {\n  align-self: center;\n  padding: 0.4em 1em;\n}\n\n/* -------------- MODAL SPECIFIC -------------- */\n#edit-todo-modal, #edit-project-modal {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.8rem;\n\n}\n\n#edit-todo-modal label {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.3rem;\n  text-align: center;\n}\n\n.msg-modal {\n  overflow-wrap: break-word;\n}\n\n\n.modal h2 {\n  text-align: center;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"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",sourcesContent:["*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    /* border: 1px solid red; */\n}\n\n:root { \n  font-size: 100%;\n  font-family: sans-serif;\n  --main-bg-clr: #FBFCD4;\n  --white: #fff;\n  --hover-gold: #FBC403;\n  --black-clr: #0A0A0A;\n  --transparent-black: rgba(0,0,0,0.9);\n  --medium-black: #292826;\n  --light-black: #151515;\n  --title-gold: #FBC403;\n  --light-green: #DAFFD5;\n  --light-red: #FA6B84;\n}\n\nbody {\n  background-color: #ececec;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n  grid-template-areas: \"header header\"\n                       \"sidebar main\";\n}\n\n@media only screen and (max-width: 600px) {\n  body {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n/* -------------- UTILS / Commons -------------- */\n\n.btn {\n  padding: 0.5em 1em;\n  border: none;\n  outline: 1px solid rgba(0,0,0,0.2);\n  border-radius: 50%;\n  transition: all ease-in-out 200ms;\n}\n\n.btn:hover {\n  box-shadow: 0 4px 2px #888888;\n  transform: translateY(-2px);\n}\n\n.btn:active {\n  transform: translateY(3px);\n  box-shadow: none;\n}\n\n.svg-button {\n  \n  width: 2rem;\n  height: 2rem;\n  background-repeat: no-repeat;\n  background-color: var(--white);\n  background-position: center;\n  background-size: 75%;\n  \n}\n\n\n.controller-title {\n  text-align: center;\n  padding: 0.5em 1em;\n  background-color: var(--transparent-black);\n  letter-spacing: 0.08em;\n  color: var(--white);\n}\n\ninput {\n  padding: 0.5em;\n  font-size: 1rem;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  background-color: #ececec;\n}\n\ninput:focus {\n  outline: 3px solid black;\n}\n\n\n\n/* -------------- HEADER -------------- */\nheader {\n  background-color: var(--white);\n  grid-area: header;\n  text-align: center;\n  padding: 1em;\n}\n\n/* -------------- SIDEBAR -------------- */\n.project-sidebar {\n  background-color: var(--white);\n  grid-area: sidebar;\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  padding: 1em 1em;\n  margin: 1rem;\n  border-radius: 8px;\n}\n\n.project-input-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 1rem;\n}\n\n.project-input {\n  padding: 0.5em;\n  font-size: 1.1rem;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  background-color: #ececec;\n}\n\n.btn.add-project-btn {\n  padding: 0.2em 0.5em;\n  font-size: 1.6rem;\n  font-weight: bold;\n}\n\n.project-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  margin-top: 3rem;\n}\n\n.project {\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n  padding: 1.2em 1em;\n  outline: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.project:hover {  \n  background: rgba(0, 0, 0, 0.2);\n  outline: 2px solid black;\n  cursor: pointer;\n}\n\n.project:hover::before{\n  content: \"☛ \";\n  color: #0A0A0A;\n}\n\n.project__edit {\n  margin-left: auto;\n  background-image: url('../assets/pencil.svg');\n}\n\n.project__delete{\n  background-image: url('../assets/delete.svg');\n}\n\n.project.selected {\n  transform: scale(1.05);\n  background-color: var(--black-clr);\n  color: var(--title-gold);\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 8px 15px;\n\n}\n\n.project.selected::before {\n  font-size: 1.2rem;\n  content: \"☛ \";\n  color: var(--title-gold);\n}\n\n/* -------------- MAIN -------------- */\nmain {\n  background-color: var(--white);\n  grid-area: main;\n  display: flex;\n  flex-direction: column;\n  row-gap: 1rem;\n  padding: 1em 1em;\n  margin: 1rem;\n  border-radius: 8px;\n\n}\n\n.todo-input-container {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n}\n\n\n\n.btn.add-todo-btn {\n  padding: 0.2em 0.5em;\n  font-size: 1.6rem;\n  font-weight: bold;\n}\n\n@media only screen and (max-width: 1025px) {\n  .todo-input-container {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .btn.add-todo-btn {\n    align-self: center;\n  }\n}\n\n\n.selected-project-title {\n  width: fit-content;\n  align-self: center;\n  padding-bottom: 0.5em;\n  border-bottom: 2px solid var(--black-clr);\n}\n\n.todo-list {\n  display: flex;\n  flex-direction: column;\n  row-gap: 1.5rem;\n}\n\n\n.todo {\n  background-color: #ececec;\n  border-radius: 5px;\n  box-shadow: 3px 3px 5px #888888;\n  display: flex;\n  flex-direction: row;\n  gap: 0.8rem;\n  padding: 1.2em 1em;\n  align-items: center;\n}\n\n.todo__details {\n  margin-left: auto;\n  background-image: url('../assets/information-outline.svg');\n}\n\n.todo__edit {\n  background-image: url('../assets/pencil.svg');\n}\n\n.todo__delete {\n  background-image: url('../assets/delete.svg');\n}\n\n.todo.priority-medium {\n  background-color: var(--light-green);\n}\n\n.todo.priority-high {\n  background-color: var(--light-red);\n}\n\n\n\n/* -------------- MODAL -------------- */\n\n.modal {\n  padding: 1rem 2rem;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  transition: 200ms ease-in-out;\n  border: 1px solid black;\n  border-radius: 10px;\n  z-index: 10;\n  background-color: white;\n  width: max-content;\n  max-width: 80%;\n}\n\n.modal.active {\n  transform: translate(-50%, -50%) scale(1);\n}\n\n/* --- OVERLAY --- */\n#overlay {\n  position: fixed;\n  opacity: 0;\n  transition: 200ms ease-in-out;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, .5);\n  pointer-events: none;\n}\n\n#overlay.active {\n  opacity: 1;\n  pointer-events: all;\n}\n\n.modal button {\n  align-self: center;\n  padding: 0.4em 1em;\n}\n\n/* -------------- MODAL SPECIFIC -------------- */\n#edit-todo-modal, #edit-project-modal {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.8rem;\n\n}\n\n#edit-todo-modal label {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.3rem;\n  text-align: center;\n}\n\n.msg-modal {\n  overflow-wrap: break-word;\n}\n\n\n.modal h2 {\n  text-align: center;\n}"],sourceRoot:""}]);const E=u},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],s=0;s<n.length;s++){var A=n[s],d=o.base?A[0]+o.base:A[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=t(l),m={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var h=i(m,o);o.byIndex=s,e.splice(s,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=t(r[a]);e[s].references--}for(var A=o(n,i),d=0;d<r.length;d++){var c=t(r[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=A}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},174:(n,e,t)=>{class o{constructor(n,e){this.name=n,this.todoList=[],this.id=e}addTodo(n){this.todoList.push(n)}deleteTodo(n){for(let e=0;e<this.todoList.length;e++)if(this.todoList[e].id===n)return void this.todoList.splice(e,1)}}const i={events:{},on:function(n,e){n in this.events||(this.events[n]=[]),this.events[n].push(e)},off:function(n,e){if(n in this.events)for(let t=0;t<this.events[n].length;t++)if(this.events[n][t]===e)return void this.events[n].splice(t,1)},emit:function(n,e){if(n in this.events)for(let t of this.events[n])t(e)}};class r{constructor(n,e){this.type=n,this._element=document.querySelector(e),this.overlay=document.querySelector("#overlay"),this.overlay.addEventListener("click",this.closeModal.bind(this)),this.formEvent=""}openModal(n=""){"message"===this.type&&(this._element.innerHTML=n),this._element.classList.add("active"),this.overlay.classList.add("active")}closeModal(){this._element.classList.remove("active"),this.overlay.classList.remove("active"),"message"===this.type&&(this.innerHTML="")}setupForm(n){"form"===this.type&&(this.formEvent=n,this._element.addEventListener("submit",this.handleForm.bind(this),{once:!0}))}handleForm(n){n.preventDefault();const e=this.getFormValues(),t=Object.assign({},e,{id:this.formID});i.emit(this.formEvent,t),this.closeModal()}fillForm(n){if("form"===this.type){this.formID=n.id;for(let e in n)e in this._element.elements&&(this._element.elements[e].value=n[e])}else console.log("not form type")}emptyForm(n){"form"===this.type&&n.reset()}getFormValues(){const n={};for(let e in this._element.elements)n[e]=this._element.elements[e].value;return n}}class a{constructor(n){this.project=n,this.name=this.project.name,this.id=this.project.id,this._element=document.createElement("div"),this._element.classList.add("project"),this._element.setAttribute("data-id",this.id)}get element(){const n=document.createElement("h3");n.classList.add("project__title"),n.textContent=this.name,this._element.appendChild(n);const e=document.createElement("button");e.setAttribute("class","btn project__edit svg-button"),e.addEventListener("click",this.handleEdit.bind(this)),this._element.appendChild(e);const t=document.createElement("button");return t.setAttribute("class","btn project__delete svg-button"),this._element.appendChild(t),this._element}handleEdit(n){const e=new r("form","#edit-project-modal");e.setupForm("editProject"),e.fillForm(this),e.openModal()}}class s{constructor(n,e,t,o,i=!1,r){this.title=n,this.desc=e,this.dueDate=t,this.priority=o,this.completed=i,this.id=r}}function A(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function d(n){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},d(n)}function c(n){A(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===d(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}var l={};function u(){return l}function m(n,e){A(2,arguments);var t=c(n),o=c(e),i=t.getTime()-o.getTime();return i<0?-1:i>0?1:i}function h(n,e){A(2,arguments);var t=c(n),o=c(e),i=t.getFullYear()-o.getFullYear(),r=t.getMonth()-o.getMonth();return 12*i+r}function p(n){A(1,arguments);var e=c(n);return e.setHours(23,59,59,999),e}function E(n){A(1,arguments);var e=c(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function f(n){A(1,arguments);var e=c(n);return p(e).getTime()===E(e).getTime()}function g(n,e){A(2,arguments);var t,o=c(n),i=c(e),r=m(o,i),a=Math.abs(h(o,i));if(a<1)t=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-r*a);var s=m(o,i)===-r;f(c(n))&&1===a&&1===m(n,i)&&(s=!1),t=r*(a-Number(s))}return 0===t?0:t}function b(n,e){return A(2,arguments),c(n).getTime()-c(e).getTime()}var C={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function B(n){return n?C[n]:C.trunc}function v(n,e,t){A(2,arguments);var o=b(n,e)/1e3;return B(null==t?void 0:t.roundingMethod)(o)}var y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,o=n.formats[t]||n.formats[n.defaultWidth];return o}}const x={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var k={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function j(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,r=null!=t&&t.width?String(t.width):i;o=n.formattingValues[r]||n.formattingValues[i]}else{var a=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[s]||n.values[a]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const M={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:j({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:j({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:j({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:j({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:j({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function S(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,i=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],r=e.match(i);if(!r)return null;var a,s=r[0],A=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(A)?I(A,(function(n){return n.test(s)})):D(A,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(d):d,a=t.valueCallback?t.valueCallback(a):a;var c=e.slice(s.length);return{value:a,rest:c}}}function D(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function I(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var F,P={ordinalNumber:(F={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(F.matchPattern);if(!t)return null;var o=t[0],i=n.match(F.parsePattern);if(!i)return null;var r=F.valueCallback?F.valueCallback(i[0]):i[0];r=e.valueCallback?e.valueCallback(r):r;var a=n.slice(o.length);return{value:r,rest:a}}),era:S({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:S({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:S({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:S({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:S({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const T={code:"en-US",formatDistance:function(n,e,t){var o,i=y[n];return o="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:x,formatRelative:function(n,e,t,o){return k[n]},localize:M,match:P,options:{weekStartsOn:0,firstWeekContainsDate:1}};function L(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}function z(n){return L({},n)}function _(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var R=1440,N=43200;function W(n,e,t){var o,i;A(2,arguments);var r=u(),a=null!==(o=null!==(i=null==t?void 0:t.locale)&&void 0!==i?i:r.locale)&&void 0!==o?o:T;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var s=m(n,e);if(isNaN(s))throw new RangeError("Invalid time value");var d,l,h=L(z(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:s});s>0?(d=c(e),l=c(n)):(d=c(n),l=c(e));var p,E=v(l,d),f=(_(l)-_(d))/1e3,b=Math.round((E-f)/60);if(b<2)return null!=t&&t.includeSeconds?E<5?a.formatDistance("lessThanXSeconds",5,h):E<10?a.formatDistance("lessThanXSeconds",10,h):E<20?a.formatDistance("lessThanXSeconds",20,h):E<40?a.formatDistance("halfAMinute",0,h):E<60?a.formatDistance("lessThanXMinutes",1,h):a.formatDistance("xMinutes",1,h):0===b?a.formatDistance("lessThanXMinutes",1,h):a.formatDistance("xMinutes",b,h);if(b<45)return a.formatDistance("xMinutes",b,h);if(b<90)return a.formatDistance("aboutXHours",1,h);if(b<R){var C=Math.round(b/60);return a.formatDistance("aboutXHours",C,h)}if(b<2520)return a.formatDistance("xDays",1,h);if(b<N){var B=Math.round(b/R);return a.formatDistance("xDays",B,h)}if(b<86400)return p=Math.round(b/N),a.formatDistance("aboutXMonths",p,h);if((p=g(l,d))<12){var y=Math.round(b/N);return a.formatDistance("xMonths",y,h)}var w=p%12,x=Math.floor(p/12);return w<3?a.formatDistance("aboutXYears",x,h):w<9?a.formatDistance("overXYears",x,h):a.formatDistance("almostXYears",x+1,h)}class Y{constructor({title:n,desc:e,dueDate:t,priority:o,completed:i=!1,id:r}){this.title=n,this.desc=e,this.dueDate=t,this.priority=o,this.completed=i,this.id=r,this.todo=document.createElement("div"),this.todo.classList.add("todo"),this.todo.setAttribute("data-id",this.id)}get element(){const n=document.createElement("input");n.type="checkbox",n.name="completed",n.checked=this.completed,n.classList.add("todo__check");const e=document.createElement("h4");e.textContent=this.title,e.classList.add("todo__title");const t=document.createElement("button");t.setAttribute("class","btn todo__details svg-button"),t.addEventListener("click",this.handleDetails.bind(this));const o=document.createElement("p");o.textContent=this.getTimeMsg(),o.classList.add("todo__due");const i=document.createElement("button");i.setAttribute("class","btn todo__edit svg-button"),i.addEventListener("click",this.handleEdit.bind(this));const r=document.createElement("button");return r.setAttribute("class","btn todo__delete svg-button"),[n,e,t,o,i,r].forEach((n=>{this.todo.appendChild(n)})),"1"===this.priority?this.todo.classList.add("priority-low"):"2"===this.priority?this.todo.classList.add("priority-medium"):"3"===this.priority&&this.todo.classList.add("priority-high"),this.todo}handleDetails(){new r("message",".msg-modal").openModal(this.desc)}handleEdit(){const n=new r("form","#edit-todo-modal");n.setupForm("editTodo"),n.fillForm(this),n.openModal()}getTimeMsg(){const n=new Date(this.dueDate);return function(n){return A(1,arguments),c(n).getTime()>Date.now()}(n)||function(n,e){A(2,arguments);var t=c(n),o=c(e);return t.getTime()===o.getTime()}(n,new Date)?function(n,e){return A(1,arguments),W(n,Date.now(),e)}(n)+" left":"Expired"}}function O(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function U(n,e){A(2,arguments);var t=c(n),o=O(e);return isNaN(o)?new Date(NaN):o?(t.setDate(t.getDate()+o),t):t}function q(n,e){A(2,arguments);var t=c(n),o=O(e);if(isNaN(o))return new Date(NaN);if(!o)return t;var i=t.getDate(),r=new Date(t.getTime());r.setMonth(t.getMonth()+o+1,0);var a=r.getDate();return i>=a?r:(t.setFullYear(r.getFullYear(),r.getMonth(),i),t)}function X(n){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},X(n)}var G=t(379),Z=t.n(G),H=t(795),J=t.n(H),Q=t(569),V=t.n(Q),K=t(565),$=t.n(K),nn=t(216),en=t.n(nn),tn=t(589),on=t.n(tn),rn=t(735),an={};an.styleTagTransform=on(),an.setAttributes=$(),an.insert=V().bind(null,"head"),an.domAPI=J(),an.insertStyleElement=en(),Z()(rn.Z,an),rn.Z&&rn.Z.locals&&rn.Z.locals;var sn=t(756),An={};An.styleTagTransform=on(),An.setAttributes=$(),An.insert=V().bind(null,"head"),An.domAPI=J(),An.insertStyleElement=en(),Z()(sn.Z,An),sn.Z&&sn.Z.locals&&sn.Z.locals,new class{constructor(n,e){this.container=document.querySelector(n),this.projects=this.loadFromLocal()||[],this.title=e,this.projectList=document.createElement("div"),this.projectList.classList.add("project-list"),this.selectedProject="",i.on("projectUpdated",this.updateProject.bind(this)),i.on("editProject",this.updateProjectInfo.bind(this))}init(){const n=document.createElement("h2");n.classList.add("controller-title"),n.textContent=this.title;const e=document.createElement("div");e.classList.add("project-input-container"),this.projectInput=document.createElement("input"),this.projectInput.classList.add("project-input"),this.projectInput.placeholder="Enter Project Name",e.appendChild(this.projectInput);const t=document.createElement("button");t.setAttribute("class","btn add-project-btn"),t.textContent=" + ",e.appendChild(t),t.addEventListener("click",this.addProject.bind(this)),this.projectList.addEventListener("click",this.selectProject.bind(this)),this.container.appendChild(n),this.container.appendChild(e),this.container.appendChild(this.projectList),this.renderProjects()}addProject(){const n=this.projectInput.value||"Untitled",e=new o(n,"proj-"+Date.now());this.projects.push(e),this.renderProjects(),this.updateLocal()}renderProjects(){this.projectList.innerHTML="";for(let n of this.projects){const e=new a(n);this.projectList.appendChild(e.element)}for(let n of Array.from(this.projectList.children))n.getAttribute("data-id")===this.selectedProject.id&&n.classList.add("selected")}selectProject(n){console.log(n.target);const e=n.target.getAttribute("class").includes("project"),t=n.target.hasAttribute("data-id"),o=n.target.getAttribute("class").includes("project__edit"),i=n.target.getAttribute("class").includes("project__title"),r=n.target.getAttribute("class").includes("project__delete");e&&t?(console.log("project click"),this.selectElement(n.target)):o||i?(console.log("child click"),this.selectElement(n.target.parentElement)):r&&this.deleteProject(n.target.parentElement)}selectElement(n){this.deselect(),n.classList.add("selected");const e=n.getAttribute("data-id");this.selectedProject=this.getSelectedProject(e),i.emit("selectProject",this.selectedProject),this.renderProjects()}deselect(){Array.from(this.projectList.children).forEach((n=>{n.classList.remove("selected")}))}getSelectedProject(n){return this.projects.filter((e=>e.id===n))[0]}updateProject(n){for(let e=0;e<this.projects.length;e++)this.projects[e].id===n.id&&(this.projects[e]=n);i.emit("selectProject",this.selectedProject),this.updateLocal()}updateProjectInfo(n){for(let e of this.projects)if(e.id===n.id){for(let t in n)t in e&&(e[t]=n[t]);break}console.log(this.projects),this.renderProjects(),i.emit("selectProject",this.selectedProject),this.updateLocal()}deleteProject(n){const e=n.getAttribute("data-id");for(let n=0;n<this.projects.length;n++)if(this.projects[n].id===e){this.projects.splice(n,1);break}n.remove(),n.getAttribute("class").includes("selected")&&(this.selectedProject="",i.emit("selectProject",this.selectedProject)),this.updateLocal()}loadFromLocal(){return!!window.localStorage.getItem("projects")&&JSON.parse(window.localStorage.getItem("projects"))}updateLocal(){window.localStorage.setItem("projects",JSON.stringify(this.projects))}}(".project-sidebar","PROJECTS").init(),new class{constructor(n,e){this.container=document.querySelector(n),this.todos=[],this.title=e||"None",this.selectedProject="",this.todoList=document.createElement("div"),this.todoList.classList.add("todo-list"),i.on("selectProject",this.render.bind(this)),i.on("editTodo",this.updateTodo.bind(this))}init(){const n=document.createElement("h2");n.classList.add("controller-title"),n.textContent=this.title;const e=document.createElement("div");e.classList.add("todo-input-container"),this.todoTitleInput=document.createElement("input"),this.todoTitleInput.placeholder="Enter Todo Title",this.todoTitleInput.classList.add("todo-title-input"),e.appendChild(this.todoTitleInput),this.todoDescInput=document.createElement("input"),this.todoDescInput.placeholder="Enter Todo Details",this.todoDescInput.classList.add("todo-desc-input"),e.appendChild(this.todoDescInput),this.todoDueInput=document.createElement("input"),this.todoDueInput.type="date",this.todoDueInput.valueAsDate=function(n,e){if(A(2,arguments),!e||"object"!==X(e))return new Date(NaN);var t=e.years?O(e.years):0,o=e.months?O(e.months):0,i=e.weeks?O(e.weeks):0,r=e.days?O(e.days):0,a=e.hours?O(e.hours):0,s=e.minutes?O(e.minutes):0,d=e.seconds?O(e.seconds):0,l=c(n),u=o||t?q(l,o+12*t):l,m=r||i?U(u,r+7*i):u,h=1e3*(d+60*(s+60*a));return new Date(m.getTime()+h)}(new Date,{days:3}),this.todoDueInput.classList.add("todo-dueDate-input"),e.appendChild(this.todoDueInput),this.todoPriorityInput=document.createElement("input"),this.todoPriorityInput.type="number",this.todoPriorityInput.classList.add("todo-priority-input"),this.todoPriorityInput.min="1",this.todoPriorityInput.max="3",this.todoPriorityInput.value="1",e.appendChild(this.todoPriorityInput);const t=document.createElement("button");t.setAttribute("class","btn add-todo-btn"),t.textContent=" + ",t.addEventListener("click",this.addTodo.bind(this)),this.todoList.addEventListener("click",this.handleTodoClick.bind(this)),e.appendChild(t),this.projectTitle=document.createElement("h2"),this.projectTitle.classList.add("selected-project-title"),this.projectTitle.textContent="Project Name",this.container.appendChild(n),this.container.appendChild(e),this.container.appendChild(this.projectTitle),this.container.appendChild(this.todoList),this.renderTodoList()}addTodo(){if(this.selectedProject){const n=this.todoTitleInput.value||"Untitled",e=this.todoDescInput.value||"Untitled",t=this.todoDueInput.value||"2023-03-01",o=this.todoPriorityInput.value||2,i=new s(n,e,t,o,!1,"todo-"+Date.now());this.todos.push(i);const r=new Y(i);this.todoList.appendChild(r.element),this.updateProject()}else new r("message",".msg-modal").openModal("Select a Project before adding tasks.")}renderTodoList(){if(this.selectedProject?this.projectTitle.textContent=this.selectedProject.name:this.projectTitle.textContent="No Project Selected",this.todoList.innerHTML="",this.todos.length>=1)for(let n of this.todos){const e=new Y(n);this.todoList.appendChild(e.element)}}render(n){console.log("received in todo",n),console.log("hi this is from selectProject event in todocontroller"),n?(this.selectedProject=n,this.todos=[...this.selectedProject.todoList]):(this.selectedProject="",this.todos=[]),this.renderTodoList()}updateTodo(n){for(let e of this.todos)if(e.id===n.id){for(let t in n)t in e&&(e[t]=n[t]);break}this.updateProject(),this.renderTodoList()}updateProject(){this.selectedProject.todoList=[...this.todos],i.emit("projectUpdated",this.selectedProject)}deleteTodo(n){const e=n.parentNode.getAttribute("data-id");n.parentNode.hasAttribute("class","todo")&&n.parentNode.remove();for(let n=0;n<this.todos.length;n++)if(this.todos[n].id===e){this.todos.splice(n,1);break}this.selectedProject.deleteTodo(e),this.updateProject(),this.renderTodoList()}updateCheck(n){const e=n.parentNode.getAttribute("data-id");for(let t=0;t<this.todos.length;t++)if(this.todos[t].id===e){this.todos[t].completed=n.checked;break}this.updateProject(),this.renderTodoList()}handleTodoClick(n){const e=n.target.getAttribute("class").includes("todo__delete"),t=n.target.getAttribute("class").includes("todo__check");e?this.deleteTodo(n.target):t&&this.updateCheck(n.target)}}(".todo-main","TASKS").init()},217:(n,e,t)=>{n.exports=t.p+"bde675c38d54979f589e.svg"},859:(n,e,t)=>{n.exports=t.p+"de601bffcc65620d7328.svg"},119:(n,e,t)=>{n.exports=t.p+"8d317290131028fe10cf.svg"}},n=>{n(n.s=174)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,